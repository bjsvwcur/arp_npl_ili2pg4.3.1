import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")


    iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
    dbSchemaLandUsePlans = "arp_npl"
    dbSchemaLandUsePlansPub = "arp_npl_pub"
    landUsePlansDataSets = ["2401"]
    landUsePlansBaseUrl = "https://geo.so.ch/geodata/ch.so.arp.nutzungsplanung/"
    
}    

// Cannot use GRETL for ili2pgImportSchema since not all v4 options
// are exposed. 
task createSchemaLandUsePlans(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['arp_npl.sql', 'arp_npl_grants.sql']
}

landUsePlansDataSets.each { landUsePlansDataSet ->
    def dataSet = landUsePlansDataSet.toString()
    task "downloadDataLandUsePlans_$dataSet"(type: Download) {
        src landUsePlansBaseUrl + dataSet + ".xtf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceDataLandUsePlans_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadDataLandUsePlans_$dataSet") {
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        models = iliModelLandUsePlans
        dbschema = dbSchemaLandUsePlans
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task createSchemaLandUsePlansPub(type: SqlExecutor){
    database = [dbUriPub, "admin", "admin"]
    sqlFiles = ['arp_npl_pub.sql', 'arp_npl_pub_grants.sql']
}

task replaceDataLandUsePlans() {
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceDataLandUsePlans_') }
    }
}

